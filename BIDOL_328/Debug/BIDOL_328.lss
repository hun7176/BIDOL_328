
BIDOL_328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000011e  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081c  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000732  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038d  00000000  00000000  000011aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000105  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  8e:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_INIT>:
void UART_INIT(void); //UART 초기화
void UART_transmit(unsigned char data); //1바이트 송신
void UART_printString(char *str); //문자열 송신

void UART_INIT(void){
	UCSR0A |= (1<<U2X0);
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
	UBRR0H = 0x00;
  a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 207;
  a4:	8f ec       	ldi	r24, 0xCF	; 207
  a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C |= 0x06;
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0);
  b4:	e1 ec       	ldi	r30, 0xC1	; 193
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <UART_transmit>:
}

void UART_transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
  c0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c4:	95 ff       	sbrs	r25, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <UART_transmit>
	UDR0 = data;
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	08 95       	ret

000000ce <UART_printString>:
}

void UART_printString(char *str){
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	8c 01       	movw	r16, r24
	for(int i=0; str[i];i++){
  d8:	c0 e0       	ldi	r28, 0x00	; 0
  da:	d0 e0       	ldi	r29, 0x00	; 0
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <UART_printString+0x16>
		UART_transmit(str[i]);
  de:	0e 94 60 00 	call	0xc0	; 0xc0 <UART_transmit>
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void UART_printString(char *str){
	for(int i=0; str[i];i++){
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	f8 01       	movw	r30, r16
  e6:	ec 0f       	add	r30, r28
  e8:	fd 1f       	adc	r31, r29
  ea:	80 81       	ld	r24, Z
  ec:	81 11       	cpse	r24, r1
  ee:	f7 cf       	rjmp	.-18     	; 0xde <UART_printString+0x10>
		UART_transmit(str[i]);
	}
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	08 95       	ret

000000fa <main>:
#include "servo_pwm.h"
#include "water_sensor.h"
#include "UART.h"

int main(){
	UART_INIT();
  fa:	0e 94 4b 00 	call	0x96	; 0x96 <UART_INIT>
	while(1){
		UART_printString("123123123");
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 67 00 	call	0xce	; 0xce <UART_printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	83 ed       	ldi	r24, 0xD3	; 211
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x12>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x1c>
 116:	00 00       	nop
 118:	f2 cf       	rjmp	.-28     	; 0xfe <main+0x4>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
